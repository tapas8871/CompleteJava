package Streams;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class Product {
    private int price;
    private int size;
    private String name;

    public Product(int price, int size, String name) {
        this.price = price;
        this.size = size;
        this.name = name;
    }

    public int getPrice() {
        return price;
    }

    public int getSize() {
        return size;
    }

    public String name() {
        return name;
    }

}

class Employee {
    private int id;
    private String name;
    private int salary;


    public Employee(int id, String name, int salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String name() {
        return name;
    }

    public int getSalary() {
        return salary;
    }
}

class Student {
    private int age;
    private String name;
    private int score;

    public Student(int age, String name, int score) {
        this.age = age;
        this.name = name;
        this.score = score;
    }

    public int getAge() {
        return age;
    }

    public String getName() {
        return name;
    }

    public int getScore() {
        return score;
    }

    @Override
    public String toString() {
        return "Student [name=" + name + ", score+" + score + ", + age+" + age + "]";
    }

}


public class JavaStreams {
    public static void main(String[] args) {
//         List<Integer> numberList = Arrays.asList(10, 15, 17, 20, 23, 25, 28, 30, 31, 43);
//         List<Integer> evenList = numberList.stream().filter(ele->ele%2==0).collect(Collectors.toList());
//         numberList.stream().filter(ele->ele%2==0).forEach(ele -> System.out.print(ele + " "));
//         System.out.println(evenList);
//         numberList.stream().filter(ele->ele%2==0).forEach(System.out::println);


//         List<String> names = Arrays.asList("Melisadre", "Sansa","jon","Daenerys", "John");
//         List<String> longNames = names.stream().filter(ele->ele.length()>6 && ele.length()<10).collect(Collectors.toList());
//         System.out.println(longNames);
//         names.stream().filter(ele->ele.length()>6 && ele.length()<10).forEach(System.out::println);
//
//
//         List<String> words = Arrays.asList("cup", null, "forest","sky","book",null,"theatre");
//         List<String> validWords = words.stream().filter(ele->ele!=null).collect(Collectors.toList());
//         System.out.println(validWords);
//         words.stream().filter(ele->ele!=null).forEach(System.out::println);


//         List<Product> productList = new ArrayList<>();
//         productList.add(new Product(30, 13, "Shiva"));
//         productList.add(new Product(32, 11, "Conway"));
//         productList.add(new Product(35, 19, "David"));
//         productList.add(new Product(31, 10, "Aadi"));
//         productList.add(new Product(39, 9, "Rahul"));
//
//         productList.stream().filter(ele->ele.getPrice()>30 && ele.getSize()>10).forEach(ele-> System.out.print(ele.name()+" "));


        /*Map function*/

//         List<String> vehicles = Arrays.asList("bus", "car", "bike","flight", "car");
//         List<String> upperCaseVehicles = vehicles.stream().map(name->name.toUpperCase()).collect(Collectors.toList());
//         List<String> validCarNames = vehicles.stream().map(String::toUpperCase).collect(Collectors.toList());
//         System.out.println(validCarNames);
//         vehicles.stream().map(ele->ele.toUpperCase()).forEach(System.out::print);
//         vehicles.stream().map(name->name.length()).forEach(System.out::println);


//         List<Integer> numbers = Arrays.asList(2, 3, 4, 5, 6, 8);
//         numbers.stream().map(ele -> ele * 3).forEach(ele -> System.out.println(ele + " "));
//
//         List<Employee> employees = new ArrayList<>();
//         employees.add(new Employee(3, "Tapas", 30000));
//         employees.add(new Employee(6, "Tripesh", 40000));
//         employees.add(new Employee(1, "Shivan", 50000));
//         employees.add(new Employee(9, "Harshit", 60000));
//
//         List<Integer> empSalary = employees.stream().filter(ele->ele.getSalary()>40000).map(ele->ele.getSalary()).collect(Collectors.toList());
//         System.out.println(empSalary);

        /*flatMap Method*/
        List<Integer> list1 = Arrays.asList(1, 2);
        List<Integer> list2 = Arrays.asList(3, 4);
        List<Integer> list3 = Arrays.asList(5, 6);

        List<List<Integer>> finalList = Arrays.asList(list1, list2, list3);
        List<Integer> finalAnswer = finalList.stream().flatMap(x -> x.stream()).collect(Collectors.toList());
//         System.out.println(finalAnswer);


        List<Integer> finalAnswers = finalList.stream().flatMap(x -> x.stream()).map(x -> x * 10).collect(Collectors.toList());
//         System.out.println(finalAnswers);


        List<String> teamA = Arrays.asList("Scott", "David", "John");
        List<String> teamB = Arrays.asList("Mary", "Luna", "Tom");
        List<String> teamC = Arrays.asList("Nora", "Petty", "Cindrella");


        List<List<String>> players = new ArrayList<>();
        players.add(teamA);
        players.add(teamB);
        players.add(teamC);


//         players.stream().flatMap(e->e.stream().filter(ele->ele.length()>6)).forEach(System.out::println);
//         players.stream().flatMap(ele->ele.stream().map(str->str.toUpperCase())).forEach(System.out::println);



        /*Distinct and Limit Method*/
        List<String> vehicles = Arrays.asList("car", "car", "bike", "car", "bike", "train", "bus", "helicopter");
        List<String> uniqueVehicles = vehicles.stream().distinct().collect(Collectors.toList());
//         System.out.println(uniqueVehicles);

//         System.out.println(vehicles.stream().distinct().count());

//          vehicles.stream().distinct().limit(3).forEach(System.out::println);


        /*Count Method*/
        List<Integer> values = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        long evenCount = values.stream().filter(x -> x % 2 == 0).count();
//         System.out.println(evenCount);

        /*min and max methods*/
        List<Integer> input = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        Optional<Integer> minValue = input.stream().min((a, b) -> {
            return a.compareTo(b);
        });
//         System.out.println(minValue.get());

        Optional<Integer> maxValue = input.stream().max((a, b) -> {
            return a.compareTo(b);
        });
//        System.out.println(maxValue.get());


        /*reduce Method*/
        List<String> stringList = Arrays.asList("A", "B", "C", "D", "1", "2", "3");
        Optional<String> stringListResult = stringList.stream().reduce((a, b) -> {
            return a + b;
        });
//        System.out.println(stringListResult.get());


        /*Primitive Int Array and Not Collection */
        Object arr[] = input.stream().toArray();
        for (int i = 0; i < arr.length; i++) {
            //  System.out.print(arr[i]+" ");
        }

        /* sorting */
        List<Integer> nums = Arrays.asList(7, 8, 9, 2, 3, 4, 10, 9, 12, 31);
        List<Integer> ascSortedValues = nums.stream().sorted().collect(Collectors.toList());
        // System.out.println(ascSortedValues);

        List<Integer> dscSortedValues = nums.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        //   System.out.println(dscSortedValues);

        List<String> stringInput = Arrays.asList("John", "Mary", "Kim", "David", "Smith");
        List<String> ascSortedString = stringInput.stream().sorted().collect(Collectors.toList());
        //    System.out.println(ascSortedString);

        List<String> dscSortedString = stringInput.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
        //    System.out.println(dscSortedString);


        /* anyMatch, allMatch and nonMatch */
        List<String> fruits = new ArrayList<>();
        fruits.add("One apple only");
        fruits.add("One mango only");
        fruits.add("One orange only");
        fruits.add("One pineapple only");
        fruits.add("One Guava only");


        boolean result = fruits.stream().anyMatch((str) -> {
            return str.startsWith("One");
        });
        //      System.out.println(result);


        result = fruits.stream().allMatch((str) -> {
            return str.endsWith("only");
        });
        boolean result1 = fruits.stream().noneMatch((str) -> {
            return str.endsWith("only");
        });
//        System.out.println(result);
//        System.out.println(result1);


        //None of the values startWith 1 so we get true otherwise we get false
        result1 = fruits.stream().noneMatch((str) -> {
            return str.startsWith("1");
        });
        // System.out.println(result1);


        /* findAny(mostly used when using the parallel streams) and findFirst */
        List<String> stringValues = Arrays.asList("Two", "Three", "Four");
        Optional<String> answer1 = stringValues.stream().findAny();
        //    System.out.println(answer1.get());

        Optional<String> answer2 = stringValues.stream().findFirst();
        //    System.out.println(answer2.get());


        /*stream concatanation */
        List<String> animalsList = Arrays.asList("Dog", "Cat", "Elephant");
        List<String> birdsList = Arrays.asList("Peacock", "Parrot", "Crow");

        Stream<String> stream1 = animalsList.stream();
        Stream<String> stream2 = birdsList.stream();


        List<String> livingBeings = Stream.concat(stream1, stream2).collect(Collectors.toList());
        //   System.out.println(livingBeings);


        /* Parallel streams */
        List<Student> studentList1 = new ArrayList<>();
        studentList1.add(new Student(23, "Danvoy", 54));
        studentList1.add(new Student(32, "Conwoy", 89));
        studentList1.add(new Student(14, "Srishti", 66));
        studentList1.add(new Student(26, "Shivali", 34));
        studentList1.add(new Student(20, "Shruti", 89));

        /*using stream() -sequential */
        //    studentList1.stream().filter(ele -> ele.getScore() >= 66).limit(2).forEach(x -> System.out.println(x.getScore() + " " + x.getAge()));

        /*using parallelStream() */
        //    studentList1.parallelStream().filter(s -> s.getScore() >= 80).limit(3).forEach(x -> System.out.println(x.getScore() + x.getAge()));


        /* convert stream() to parallelStream() using parallel() */
        //  studentList1.stream().parallel().filter(ele->ele.getScore()>=80).limit(2).forEach(x-> System.out.println(x.getScore() + x.getAge()));



        /*
         * 1.groupingBy(function)
         * 2.groupingBy(function,collector)
         * 3.groupingBy(function,supplier,collector)
         * */


        //1. groupingBy(function)
        /*This version groups elements by a classifier function and returns a Map<K, List<T>>, where:
            K → Key generated by the classifier function.
            List<T> → Grouped values.*/

        Map<Integer, List<Student>> groupByAgeList = studentList1.stream().collect(Collectors.groupingBy(Student::getAge));
        // System.out.println(groupByAgeList);
        groupByAgeList = studentList1.stream().collect(Collectors.groupingBy(x -> x.getAge()));
        //  System.out.println(groupByAgeList);

        //2.groupingBy(function,collector)
        Map<Integer, Set<Student>> groupByNameAgeSet = studentList1.stream().collect(Collectors.groupingBy(Student::getAge, Collectors.toSet()));
       // System.out.println(groupByNameAgeSet);

        groupByNameAgeSet = studentList1.stream().collect(Collectors.groupingBy(x->x.getAge(),Collectors.toSet()));
     //   System.out.println(groupByNameAgeSet);


        Map<Integer, List<String>> groupByAgeNameList = studentList1.stream().collect(Collectors.groupingBy(Student::getAge, Collectors.mapping(Student::getName, Collectors.toList())));
        System.out.println(groupByAgeNameList);
        groupByAgeNameList = studentList1.stream().collect(Collectors.groupingBy(s->s.getAge(), Collectors.mapping(s->s.getName(), Collectors.toList())));
 //       System.out.println(groupByAgeNameList);

        Map<Integer,Set<Integer>> groupByAgeScoreSet = studentList1.stream().collect(Collectors.groupingBy(x->x.getAge(),Collectors.mapping(y->y.getScore(),Collectors.toSet())));
   //     System.out.println(groupByAgeScoreSet);

        //3. groupingBy(function, supplier, collector)
        HashMap<Integer,List<String>> groupByAgeNameList1 = studentList1.stream().collect(Collectors.groupingBy(x->x.getAge(),HashMap::new,Collectors.mapping(y->y.getName(),Collectors.toList())));
      //  System.out.println(groupByAgeNameList1);

        studentList1.stream().collect(Collectors.groupingBy(x->x.getAge(),()->new HashMap<>(),Collectors.mapping(y->y.getName(),Collectors.toList())));
        System.out.println(groupByAgeNameList1);


        //*Nth Highest salary*/
        List<Employee> employeeList = Arrays.asList(new Employee(101,"Alice",20000),new Employee(102,"Sneha",35000),new Employee(104,"Astha",89000));
        int n = 3;
        Employee nthHighestSalaryEmployee = employeeList.stream().sorted(Comparator.comparing(Employee::getSalary).reversed()).skip(n-1).findFirst().get();
        System.out.println(nthHighestSalaryEmployee);

        
    }

}
